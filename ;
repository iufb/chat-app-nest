import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { IParticipant } from 'src/participant/participant';
import { IUserService } from 'src/users/user';
import { Services } from 'src/utils/constants';
import { Conversation, User } from 'src/utils/typeorm';
import {
  CreateConversationParams,
  FindParticipantParams,
} from 'src/utils/types';
import { Repository } from 'typeorm';
import { IConversations } from './conversations';

@Injectable()
export class ConversationsService implements IConversations {
  constructor(
    @InjectRepository(Conversation)
    private readonly conversationRepository: Repository<Conversation>,
    @Inject(Services.PARTICIPANTS)
    private readonly participantService: IParticipant,
    @Inject(Services.USERS)
    private readonly usersService: IUserService,
  ) {}
  async createConversation(params: CreateConversationParams, user: User) {
    const userDb = await this.usersService.findUser({ id: user.id });
    const { authorId, recipientId } = params;
    if (!userDb.participant) {
      await this.createParticipantAndSave(userDb, authorId);
    }
    const recipient = await this.usersService.findUser({
      id: params.recipientId,
    });
    if (!recipient) {
      throw new HttpException('User not found', HttpStatus.BAD_REQUEST);
    }
    if (recipient) {
      console.log(recipient);
      throw new HttpException('Success', HttpStatus.OK);
    }
    if (!recipient.participant) {
      const newParticipant = await this.participantService.createParticipant({
        id: recipientId,
      });

      recipient.participant = newParticipant;
      await this.usersService.saveUser(recipient);
    }
  }
  private async createParticipantAndSave(user: User, id: number) {
    const participant = await this.participantService.createParticipant({
      id,
    });
    user.participant = participant;
    return this.usersService.saveUser(user);
  }
}
